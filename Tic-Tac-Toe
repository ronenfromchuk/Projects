import sys
import time

# global variables
player_1_choice = 'x'
player_2_choice = 'o'
game_draw = 'DRAW'

def welcome_to_tictactoe():
    print('HEY THERE! X | O | X | O |')
    time.sleep(2)
    print('Welcome to the Tic-Tac-Toe GAME!')
    time.sleep(3)
    print('The Rules is simple,\nget a row of (3) X"s or O"s and win the game!')
    time.sleep(3)
    print('*** GET READY ***')
    time.sleep(2)
    print('******* 3 *******')
    time.sleep(1)
    print('******* 2 *******')
    time.sleep(1)
    print('******* 1 *******')
    time.sleep(1)

# list of comprehension, creating the grid
grid = [cell for cell in range(9)]

# displaying grid function
def create_grid():
    print(f'| {grid[0]} | {grid[1]} | {grid[2]} |')
    print(f'| {grid[3]} | {grid[4]} | {grid[5]} |')
    print(f'| {grid[6]} | {grid[7]} | {grid[8]} |')

# winner check function
def check_winner():
    # Check the rows
    if grid[0] == grid[1] == grid[2]:
        return grid[0]
    elif grid[3] == grid[4] == grid[5]:
        return grid[3]
    elif grid[6] == grid[7] == grid[8]:
        return grid[6]

    # Check for columns
    elif grid[0] == grid[3] == grid[6]:
        return grid[0]

    elif grid[1] == grid[4] == grid[7]:
        return grid[1]

    elif grid[2] == grid[5] == grid[8]:
        return grid[2]

    # Check for diagonal
    elif grid[2] == grid[4] == grid[6]:
        return grid[2]

    elif grid[0] == grid[4] == grid[8]:
        return grid[2]

    # Check for draw
    else:
        for cell in grid:
            if isinstance(cell, int):
                return

        return game_draw

def game():
    winner = check_winner()

    if winner == 'x':
        print("player1 is the winner!")
        create_grid()
        sys.exit()

    elif winner == 'o':
        print("player2 is the winner!")
        create_grid()
        sys.exit()

    elif winner == game_draw:
        print("Game is draw ")
        sys.exit()

# functions that gives the player to choose his location at the grip
# checking the chosen location if available, if yes function upgrades the grip.
def update_grid(choice, location):

    if location < 0 or location > 9:
        raise ValueError("Not a valid location")
    # checking if grid cell occupied
    if grid[location] == 'x' or grid[location] == 'o':
        raise ValueError("Location already filled with", grid[location])
    # if cell available, player's choice accepted
    else:
        grid[location] = choice

def main():
    player_1_location = int(
        input("Player 1,you've got the - [x] symbol,\nplease enter your choice from (0 to 8): "))
    # upgrading the grid by player's 1 choice by the update_grid function
    update_grid(player_1_choice, player_1_location)

    # after updating, checking for winner, or draw
    # by calling the game() function
    game()
    create_grid()

    player_2_location = int(
        input("Player 2, you've got the - [o] symbol,\nplese enter your choice from (0 to 8): "))
    # upgrading the grid by player's 1 choice by the update_grid function
    update_grid(player_2_choice, player_2_location)
    game()
    create_grid()

# welcoming the player to game
# with info about the Tic-Tac-Toe game
welcome_to_tictactoe()

# after welcoming the player, displaying the grid
# and then game starts with the main() function inside the while True loop
create_grid()

while True:
    main()
